// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	common "github.com/krishnarajvr/micro-common"
	mock "github.com/stretchr/testify/mock"

	model "micro/module/user/model"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// Add provides a mock function with given fields: user
func (_m *IUserService) Add(user *model.UserForm) (*model.UserDto, error) {
	ret := _m.Called(user)

	var r0 *model.UserDto
	if rf, ok := ret.Get(0).(func(*model.UserForm) *model.UserDto); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.UserForm) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *IUserService) Delete(id int) (*model.UserDto, error) {
	ret := _m.Called(id)

	var r0 *model.UserDto
	if rf, ok := ret.Get(0).(func(int) *model.UserDto); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *IUserService) Get(id int) (*model.UserDto, error) {
	ret := _m.Called(id)

	var r0 *model.UserDto
	if rf, ok := ret.Get(0).(func(int) *model.UserDto); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: page
func (_m *IUserService) List(page common.Pagination) (model.UserDtos, error) {
	ret := _m.Called(page)

	var r0 model.UserDtos
	if rf, ok := ret.Get(0).(func(common.Pagination) model.UserDtos); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.UserDtos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Pagination) error); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: form, id
func (_m *IUserService) Patch(form *model.UserPatchForm, id int) (*model.UserDto, error) {
	ret := _m.Called(form, id)

	var r0 *model.UserDto
	if rf, ok := ret.Get(0).(func(*model.UserPatchForm, int) *model.UserDto); ok {
		r0 = rf(form, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.UserPatchForm, int) error); ok {
		r1 = rf(form, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: form, id
func (_m *IUserService) Update(form *model.UserForm, id int) (*model.UserDto, error) {
	ret := _m.Called(form, id)

	var r0 *model.UserDto
	if rf, ok := ret.Get(0).(func(*model.UserForm, int) *model.UserDto); ok {
		r0 = rf(form, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.UserForm, int) error); ok {
		r1 = rf(form, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
